define("document/article", function (require) {
	var Cache = require("common/library/cache");
	require("component/showdown/dist/showdown.min");
	var Template = require("common/extend/template");
	require("component/jquery.textSearch-1.0");
	var _loadArticleAjax,
	state = require("document/state"),
	events = require("document/events"),
	catalog = require("document/catalog"),
	sidebar = (require("document/progress"), require("document/sidebar")),
	search = require("document/search"),
	articleEle = state.$book.find(".m-article"),
	articleContentEle = articleEle.find(".view-body"),
	articleTitleEle = articleEle.find(".article-head h1"),
	articleJumpUpEle = articleEle.find(".article-jump .jump-up"),
	articleJumpDownEle = articleEle.find(".article-jump .jump-down"),
	sharingEle = '<div class="item w-drop drop-hover"><span class="drop-show"><i class="icon icon-share"></i><b class="text">分享</b></span><div class="drop-hide drop-hide-right"><b class="drop-arrow-outer" style="margin-left: 88px;"><i class="drop-arrow-inner"></i></b><div class="drop-hide-inner"><div class="m-share-list share-s"><a class="weixin" data-sharing="wechat">微信</a><a class="cqq" data-sharing="qq">qq</a><a class="tsina" data-sharing="weibo">新浪微博</a></div></div></div></div>',
	markdownParse = new showdown.Converter({
			omitExtraWLInCodeBlocks : !0,
			noHeaderId : !1,
			simplifiedAutoLink : !0,
			literalMidWordUnderscores : !0,
			tables : !0,
			ghCodeBlocks : !0,
			extensions : ["toc"]
		}),
	load = function (url, callback) {
		var _cacheData = Cache.get(url);
		if (_loadArticleAjax && _loadArticleAjax.abort(), _cacheData)
			$.isFunction(callback) && callback.call(this, _cacheData, !0), events.trigger("article.load", _cacheData);
		else {
			articleEle.loading(null, "loading-ripple");
			var _options = {
				url : url,
				type : "get",
				success : function (data) {
					data.status ? (Cache.set(url, data.data), $.isFunction(callback) && callback.call(this, data.data, !1)) : $.dialog.error(data.info)
				},
				complete : function () {
					articleEle.loading("hide")
				}
			};
			events.trigger("article.before_load", _options),
			_loadArticleAjax = $.ajax(_options)
		}
	},
	open = function (node) {
		if (node) {
			var id = node.get("id"),
			url = node.get("url");
			load(url, function (data) {
				state.currentArticleId = id,
				setContent(markdownParse.makeHtml(data.content)),
				setTitle(node.get("text")),
				Template.setData({
					articleId : id
				}),
				state.$book.find(".manual-right").scrollTop(0),
				events.trigger("article.open", id),
				updateJumpLink()
			})
		}
	},
	setContent = function (content) {
		var _content = content;
		_content = filterContent(_content),
		"search" == sidebar.getMode() && _content && (_content = highlightResult(_content, search.getKeyword())),
		articleContentEle.html(_content);
		var _scrollEle = articleContentEle.find(".e-search-highlight:first");
		_scrollEle.length && Util.scrollTop(_scrollEle, state.$book.find(".manual-right"), -60),
		events.trigger("article.content", content)
	},
	setTitle = function (title) {
		var _title = title;
		"search" == sidebar.getMode() && _title && (_title = highlightResult(_title, search.getKeyword())),
		document.title = Util.HTMLDeCode(title + " - " + state.title),
		articleTitleEle.html(_title),
		events.trigger("article.title", title)
	},
	updateJumpLink = function () {
		var _prevEle = sidebar.getPrevNode(!1),
		_nextEle = sidebar.getNextNode(!1);
		_prevEle ? (articleJumpUpEle.show(), articleJumpUpEle.children("a").attr("data-articleid", _prevEle.get("id")).attr("href", _prevEle.get("url")).html(Util.HTMLEnCode(_prevEle.get("text")))) : articleJumpUpEle.hide(),
		_nextEle ? (articleJumpDownEle.show(), articleJumpDownEle.children("a").attr("data-articleid", _nextEle.get("id")).attr("href", _nextEle.get("url")).html(Util.HTMLEnCode(_nextEle.get("text")))) : articleJumpDownEle.hide()
	},
	highlightResult = function (content, keyword) {
		return content = $("<div>" + content + "</div>"),
		content.textSearch(Util.HTMLEnCode(keyword), {
			markClass : "e-search-highlight"
		}),
		content.html()
	},
	filterContent = function (content) {
		var _content = content;
		return _content = _content.replace(/<[a-z A-Z]+.*?>/gi, function (str, index) {
				return str.replace(/(on[\S]+?=)/gi, "data-$1")
			}),
		_content || content
	};
	return {
		init : function (config) {
			var self = this;
			events.on("article.click", function (event, id) {
				var node = catalog.getMenu().getNode(id);
				node && open(node)
			}),
			events.on("mode.change", function () {
				updateJumpLink()
			}),
			articleJumpUpEle.on("click", function () {
				return self.upPage(),
				!1
			}),
			articleJumpDownEle.on("click", function () {
				return self.downPage(),
				!1
			}),
			config.sharing && require.async("common/module/sharing", function (Sharing) {
				state.$book.find(".m-article .head-util").append(sharingEle);
				var sharing = new Sharing({
						cover : Util.HTMLEnCode(config.cover)
					});
				events.on("article.open", function () {
					sharing.config({
						url : location.href,
						title : Util.HTMLEnCode(articleTitleEle.text()),
						summary : Util.HTMLEnCode(Util.substr(articleContentEle.text(), 0, 200))
					})
				})
			}),
			articleContentEle.on("click", "ul.markdown-toc-list a", function (e) {
				e.stopImmediatePropagation();
				var id = $(this).attr("href");
				return Util.scrollTop($(id), state.$book.find(".manual-right"), -60),
				!1
			}),
			articleContentEle.delegate("a", "click", function () {
				var href = $(this).attr("href");
				if (href.toLowerCase().indexOf("http") > -1)
					return window.open(href, "_blank"), !1;
				if (-1 === href.indexOf("/") && -1 === href.indexOf("#") && $(this).data("id")) {
					var node = catalog.getMenu().getNode($(this).data("id"));
					return node && open(node),
					!1
				}
			})
		},
		upPage : function () {
			open(sidebar.getPrevNode(!0))
		},
		downPage : function () {
			open(sidebar.getNextNode(!0))
		}
	}
}), define("document/catalog", function (require) {
	var state = require("document/state"),
	events = require("document/events");
	require("component/jquery.tree");
	var menu,
	formatData = function (element) {
		var data = [];
		return element.each(function () {
			data.push({
				url : $(this).attr("href"),
				id : $(this).data("id"),
				pid : $(this).data("pid"),
				text : Util.HTMLEnCode($(this).text())
			})
		}),
		data
	};
	return {
		init : function () {
			var articleMenuEle = $(".catalog-list", state.$book),
			menuElements = articleMenuEle.children();
			articleMenuEle.empty(),
			menu = $.tree(formatData(menuElements), {
					appendTo : articleMenuEle,
					parseTemp : function (node) {
						var _html = "",
						_text = node.get("text");
						return _html += '<span class="tree-text">' + _text + "</span>"
					},
					onSelect : function (event, node) {
						events.trigger("article.click", node.get("id"))
					}
				});
			var node;
			node = state.currentArticleId ? menu.getNode(state.currentArticleId) : menu.nodes.first(),
			node && node.selected(!0, !1)
		},
		getMenu : function () {
			return menu
		}
	}
}), define("document/collect", function (require) {
	var state = require("document/state"),
	catalog = require("document/catalog"),
	events = require("document/events"),
	tabNav = $('<span data-mode="collect" class="navg-item"><i class="icon icon-heart"></i><b class="text">收藏</b></span>'),
	articleCollectEle = $('<div class="tab-item manual-collect"><div class="collect-result"></div></div>'),
	collectEle = $('<a class="collect item" title="收藏"><i class="icon icon-heart"></i><b class="text">收藏</b></a>'),
	articleResultItems = $(),
	articleList = [],
	findCollectArticle = function () {
		articleResultItems = articleCollectEle.find(".collect-list li"),
		articleResultItems.length ? articleCollectEle.find(".collect-empty").remove() : articleCollectEle.find(".collect-empty").length || articleCollectEle.append('<div class="collect-empty"><div class="empty-inner"><i class="image"></i><b class="text">暂无相关收藏内容！</b></div></div>')
	},
	getCollectArticle = function () {
		$.ajax({
			url : "/index.php/Home/Book/ajax_collection_lists",
			data : {
				book_id : state.id
			},
			type : "post",
			success : function (data) {
				data.status && createCollectArticle(data.data)
			}
		})
	},
	createCollectArticle = function (id, did) {
		var _arr = [];
		_arr = $.isArray(id) ? id : [{
					doc_id : did,
					id : id
				}
			],
		articleList = articleList.concat(_arr);
		for (var i = 0; i < _arr.length; i++) {
			var _node = catalog.getMenu().getNode(_arr[i].doc_id);
			if (_node) {
				var _list = articleCollectEle.find("ul");
				_list.length || (_list = $('<ul class="collect-list"></ul>').appendTo(articleCollectEle.children(".collect-result")), _list.on("click", "li", function () {
						events.trigger("article.click", $(this).data("did"))
					}), _list.on("click", ".delete", function () {
						return delCollectArticle($(this).data("id")),
						!1
					}));
				var _item = $('<li data-did="' + _arr[i].doc_id + '" data-id="' + _arr[i].id + '"><span class="text">' + _node.get("text") + '</span><b class="delete icon-trash" data-id="' + _arr[i].id + '" title="取消收藏"></b></li>');
				_list.append(_item)
			}
		}
	},
	addCollectArticle = function (node) {
		var id = node.get("id");
		collectEle.hasClass("loading") || (collectEle.addClass("loading"), $.ajax({
				url : "/book/collection/add",
				data : {
					doc_id : id,
					book_id : state.id
				},
				type : "post",
				success : function (data) {
					data.status ? (createCollectArticle([data.data]), findCollectArticle(), hasCurrentCollectArticle(id)) : $.dialog.error(data.info)
				},
				complete : function () {
					collectEle.removeClass("loading")
				}
			}))
	},
	delCollectArticle = function (id) {
		var _ele = articleCollectEle.find("li[data-id=" + id + "]"),
		_del = _ele.find(".delete"),
		_did = _ele.data("did");
		_del.hasClass("loading") || collectEle.hasClass("loading") || (_del.addClass("loading"), collectEle.addClass("loading"), $.ajax({
				url : "/book/collection/cancel",
				data : {
					id : id
				},
				type : "post",
				success : function (data) {
					if (data.status) {
						_ele.remove();
						for (var i = 0; i < articleList.length; i++)
							if (articleList[i].id == id) {
								articleList.splice(i, 1);
								break
							}
						findCollectArticle(),
						hasCurrentCollectArticle(_did)
					} else
						$.dialog.error(data.info)
				},
				complete : function () {
					_del.removeClass("loading"),
					collectEle.removeClass("loading")
				}
			}))
	},
	hasCurrentCollectArticle = function (id) {
		for (var _status = !1, i = 0; i < articleList.length; i++)
			if (articleList[i].doc_id == id) {
				_status = !0;
				break
			}
		return state.currentArticleId != id ? _status : void(_status ? (collectEle.find(".cancel").length || collectEle.append($('<b class="cancel">取消</b>')), collectEle.attr("title", "取消收藏").addClass("toggle")) : (collectEle.find(".text").text("收藏"), collectEle.attr("title", "收藏").removeClass("toggle")))
	};
	return {
		init : function (config) {
			config.collect && (state.$book.find(".manual-tab .tab-navg").append(tabNav), state.$book.find(".manual-tab .tab-wrap").append(articleCollectEle), state.$book.find(".m-article .head-util").append(collectEle), collectEle.on("click", function () {
					var _node = catalog.getMenu().getNode(state.currentArticleId);
					if (_node)
						if ($(this).hasClass("toggle")) {
							var _did = _node.get("id"),
							_ele = articleResultItems.filter("[data-did=" + _did + "]"),
							_id = _ele.data("id");
							delCollectArticle(_id)
						} else
							addCollectArticle(_node);
					return !1
				}), events.on("article.open", function (event, id) {
					hasCurrentCollectArticle(id)
				}), getCollectArticle())
		},
		active : function () {
			findCollectArticle()
		},
		getResultItems : function () {
			return articleResultItems
		}
	}
}), define("document/comment", function (require) {
	var comment,
	state = require("document/state"),
	events = require("document/events"),
	commentWrapEle = $('<div class="article-comment"><div id="articleComment" class="m-comment"></div></div>'),
	articleIdHiddenEle = $('<input type="hidden" name="doc_id" />'),
	commentEle = $('<a class="comment item" title="评论"><i class="icon icon-speech-bubble"></i><b class="text">评论</b></a>');
	return {
		init : function (config) {
			config.comment && (state.$book.find(".m-article .article-wrap").append(commentWrapEle), state.$book.find(".m-article .head-util").append(commentEle), require.async("common/module/comment", function (Comment) {
					comment = new Comment({
							wrapEle : commentWrapEle.children(".m-comment"),
							disabledPost : !config.login,
							postParam : {
								book_id : state.id
							},
							delParam : {
								book_id : state.id
							},
							votePath : "/user/comment/vote",
							onePath : "/user/comment/detail",
							listPath : "/user/comment/lists",
							delPath : "/user/comment/delete",
							addPath : "/user/comment/create",
							onCreate : function () {
								this.postEnterEle.after(articleIdHiddenEle)
							}
						}),
					commentEle.click(function () {
						Util.scrollTop(comment.postEnterEle, state.$book.find(".manual-right"), -80),
						comment.postEnterEle.focus()
					});
					var pageHash = location.hash.substr(1);
					events.on("article.open", function (event, id) {
						var _hashSplit = null;
						pageHash && pageHash.indexOf("-") >= 0 && (_hashSplit = pageHash.split("-"), pageHash = null),
						_hashSplit && "comment" == _hashSplit[0] && _hashSplit[1] ? comment.loadOne({
							id : _hashSplit[1],
							doc_id : id,
							book_id : state.id
						}, function (data) {
							this.assignList({
								doc_id : id,
								book_id : state.id
							}, function () {
								data.status && this.addItem(data.data, !0, !1)
							}),
							Util.scrollTop(this.listEle, state.$book.find(".manual-right"), -120)
						}) : comment.assignList({
							doc_id : id,
							book_id : state.id
						}),
						comment.resetForm(),
						comment.textareaHeightAuto(),
						comment.setDelParam({
							doc_id : id
						}),
						articleIdHiddenEle.val(id)
					})
				}))
		}
	}
}), define("document/events", function () {
	return $({})
}), define("document/kancloud", function (require, exports, module) {
	var plugins,
	search = require("document/search"),
	events = require("document/events"),
	navigation = (require("document/keyboard"), require("document/navigation")),
	progress = require("document/progress"),
	sidebar = require("document/sidebar"),
	state = require("document/state"),
	catalog = require("document/catalog"),
	article = require("document/article"),
	collect = require("document/collect"),
	comment = require("document/comment"),
	ui = require("document/ui"),
	preload = function (callback) {
		var len = plugins.length;
		if (len) {
			var plugin_name = plugins.shift();
			require.async("./plugins/" + plugin_name + "/index", function (plugin) {
				var assets = [];
				if (plugin) {
					if (plugin.website.html)
						for (var block in plugin.website.html) {
							var content;
							switch ("string" == typeof plugin.website.html[block] && (content = plugin.website.html[block]), $.isFunction(plugin.website.html[block]) && (content = plugin.website.html[block].call(this)), block) {
							case "html:start":
								$("html").prepend(content);
								break;
							case "html:end":
								$("html").append(content);
								break;
							case "head:start":
								$("head").prepend(content);
								break;
							case "head:end":
								$("head").append(content);
								break;
							case "body:start":
								$("body").prepend(content);
								break;
							case "body:end":
								$("body").append(content)
							}
						}
					plugin.website.js && (assets = assets.concat(plugin.website.js)),
					plugin.website.css && (assets = assets.concat(plugin.website.css)),
					assets = $.map(assets, function (item, index) {
							return "./plugins/" + plugin_name + "/" + plugin.website.assets + "/" + item
						}),
					require.async(assets, function () {
						preload(callback)
					})
				} else
					preload(callback)
			})
		} else
			callback()
	},
	start = function (config) {
		plugins = config.plugins || [],
		preload(function () {
			events.trigger("init", config),
			progress.init(),
			navigation.init(),
			article.init(config),
			comment.init(config),
			collect.init(config),
			catalog.init(),
			search.init(),
			sidebar.init(),
			ui.init(),
			events.trigger("start")
		})
	};
	return {
		start : start,
		events : events,
		state : state
	}
}), define("document/keyboard", function (require, exports, module) {
	require("component/jquery.thinkkeyboard");
	var article = require("document/article"),
	sidebar = require("document/sidebar"),
	state = require("document/state");
	$(document).thinkkeyboard({
		left : function (event) {
			var target = event.target.nodeName.toLowerCase();
			return "input" != target && "textarea" != target ? (article.upPage(), !1) : void 0
		},
		right : function (event) {
			var target = event.target.nodeName.toLowerCase();
			return "input" != target && "textarea" != target ? (article.downPage(), !1) : void 0
		},
		"shift+alt+f" : function () {
			var target = event.target.nodeName.toLowerCase();
			return "input" != target && "textarea" != target ? (sidebar.toggle(), !1) : void 0
		}
	}),
	Util.isPhone() && (state.$book.addClass("manual-mobile"), function () {
		var _touchLeft = 0,
		_touchTop = 0,
		_actualLeft = 0,
		_actualTop = 0,
		_moveStatus = !1,
		_dir = "left",
		_ratio = 0,
		_speed = 0,
		_startTime = (new Date).getTime(),
		_doc = $(document);
		document.addEventListener("touchstart", function (event) {
			_touchLeft = event.touches[0].pageX,
			_touchTop = _doc.scrollTop(),
			_startTime = (new Date).getTime()
		}, !1),
		document.addEventListener("touchmove", function (event) {
			_actualLeft = event.touches[0].pageX - _touchLeft,
			_actualTop = _doc.scrollTop() - _touchTop,
			_moveStatus = !0
		}, !1),
		document.addEventListener("touchend", function () {
			if (_moveStatus) {
				var _endTime = (new Date).getTime();
				_ratio = (_endTime - _startTime) / 1e3,
				_speed = Math.abs(_actualLeft / _ratio),
				_dir = _actualLeft >= 0 ? "right" : "left",
				_actualLeft = Math.abs(_actualLeft),
				_actualTop = Math.abs(_actualTop),
				50 > _actualTop && 120 < Math.abs(_actualLeft) && ("left" == _dir ? article.downPage() : article.upPage()),
				_moveStatus = !1
			}
		}, !1),
		document.addEventListener("touchcancel", function () {
			if (_moveStatus) {
				var _endTime = (new Date).getTime();
				_ratio = (_endTime - _startTime) / 1e3,
				_speed = Math.abs(_actualLeft / _ratio),
				_dir = _actualLeft >= 0 ? "right" : "left",
				_actualLeft = Math.abs(_actualLeft),
				_actualTop = Math.abs(_actualTop),
				50 > _actualTop && 10 < Math.abs(_actualLeft) && ("left" == _dir ? article.downPage() : article.upPage()),
				_moveStatus = !1
			}
		}, !1)
	}
		())
}), define("document/navigation", function (require) {
	var events = (require("document/article"), require("document/events")),
	catalog = require("document/catalog"),
	init = !1;
	return {
		init : function () {
			events.on("article.open", function (event, id) {
				var node = catalog.getMenu().getNode(id),
				url = node.get("url").toString();
				"pushState" in history ? 0 == init ? (history.replaceState({}, "", url), init = !0) : history.pushState({}, "", url) : location.hash = url
			})
		}
	}
}), define("document/progress", function (require) {
	var manualProgressEle,
	manualProgressBarEle,
	state = require("document/state"),
	catalog = require("document/catalog"),
	events = require("document/events"),
	update = function () {
		var node = catalog.getMenu().getNode(state.currentArticleId),
		index = catalog.getMenu().nodes.getIndex(node) + 1,
		total = catalog.getMenu().nodes.getTotal(),
		progress = index / total * 100;
		manualProgressEle || (manualProgressEle = $('<div class="manual-progress"><b class="progress-bar"></b></div>').appendTo(state.$book.find(".manual-body")), manualProgressBarEle = manualProgressEle.find(".progress-bar")),
		manualProgressBarEle.width(progress + "%")
	};
	return {
		init : function () {
			events.on("article.open", function () {
				update()
			})
		}
	}
}), define("document/search", function (require) {
	var state = require("document/state"),
	events = require("document/events"),
	Template = require("common/extend/template");
	require("common/extend/validator/validator");
	var searchFormEle,
	articleSearchEle,
	articleResultItems = $(),
	articleSearchTemp = ["<%if(data && data.length){%>", '<ul class="search-list">', "<%for(var i = 0; i < data.length; i++){%>", '<li data-id="<%=data[i].id%>"><span class="text"><%=data[i].title%></span></li>', "<%}%>", "</ul>", "<%}%>"].join(""),
	findSearchResult = function () {
		articleResultItems = articleSearchEle.find(".search-list li"),
		articleResultItems.length ? articleSearchEle.find(".search-result").find(".search-empty").remove() : articleSearchEle.find(".search-result").html('<div class="search-empty"><i class="image"></i><b class="text">暂无相关搜索结果！</b></div>')
	};
	return {
		init : function () {
			articleSearchEle = state.$book.find(".manual-left .manual-search"),
			searchFormEle = articleSearchEle.find("form"),
			searchFormEle.find(":submit").click(function () {
				searchFormEle.submit()
			}),
			searchFormEle.submitForm({
				url : state.basePath + "/index.php?m=Home&c=Book&a=ajax_search",
				dataType : "jsonp",
				onBefore : function (options) {
					return options.data.keyword ? void 0 : (Util.wranStyle(searchFormEle.find(":text"), "text-wran"), !1)
				},
				onAfter : function (data) {
					articleSearchEle.find(".search-result").html(Template.parseTemp(articleSearchTemp, data)).click(function (event) {
						event.stopPropagation()
					}),
					articleResultItems = articleSearchEle.find(".search-list li"),
					articleResultItems.eq(0).click(),
					findSearchResult()
				}
			}),
			searchFormEle.find("button").on("touchstart", function () {
				return searchFormEle.submit(),
				!1
			}),
			articleSearchEle.find(".search-result").delegate(".search-list li", "click", function () {
				events.trigger("article.click", $(this).data("id"))
			})
		},
		active : function () {
			searchFormEle.find("input:text").focus().select(),
			findSearchResult()
		},
		getKeyword : function () {
			return $.trim(searchFormEle.find("input:text").val())
		},
		getResultItems : function () {
			return articleResultItems
		}
	}
}), define("document/sidebar", function (require, exports, module) {
	var state = require("document/state"),
	events = require("document/events"),
	catalog = require("document/catalog"),
	search = require("document/search"),
	collect = require("document/collect");
	require("component/jquery.cookie");
	var currentMode,
	isFullScreen = !1,
	setMode = function (mode) {
		switch (currentMode = mode, mode) {
		case "search":
			search.active();
			break;
		case "collect":
			collect.active()
		}
		events.trigger("mode.change", mode)
	},
	toggle = function () {
		isFullScreen = !isFullScreen,
		isFullScreen ? state.$book.addClass("manual-fullscreen-active") : state.$book.removeClass("manual-fullscreen-active")
	};
	return {
		init : function () {
			var $item = state.$book.find(".manual-tab .navg-item");
			state.$book.addClass("manual-mode-view"),
			$item.click(function (event) {
				var mode = $(this).data("mode");
				return $(this).hasClass("disabled") ? (event.stopImmediatePropagation(), !1) : ($(this).siblings().removeClass("active").end().addClass("active"), state.$book.removeClass("manual-mode-view manual-mode-collect manual-mode-search").addClass("manual-mode-" + mode), void setMode(mode))
			}),
			events.on("article.open", function (event, id) {
				var ele,
				node = catalog.getMenu().getNode(id);
				switch (currentMode) {
				case "search":
					ele = search.getResultItems().filter("[data-id=" + id + "]"),
					ele.length && ele.addClass("active").siblings().removeClass("active");
					break;
				case "collect":
					ele = collect.getResultItems().filter("[data-did=" + id + "]"),
					ele.length && ele.addClass("active").siblings().removeClass("active")
				}
				node.isSelected() || node.selected(!0, !0)
			}),
			state.$book.find(".manual-tab .manual-fullscreen-switch").on("click", toggle);
			var _toggleSlideBarEle = $('<span class="slidebar"><i class="icon-menu"></i></span>'),
			_taoggleMaskEle = $('<div class="manual-mask"></div>').appendTo(state.$book);
			state.$book.find(".manual-head .left").prepend(_toggleSlideBarEle),
			_toggleSlideBarEle.click(function () {
				return state.$book.toggleClass("manual-mobile-show-left"),
				!1
			}),
			_taoggleMaskEle.click(function () {
				return _toggleSlideBarEle.click(),
				!1
			}),
			state.$book.find(".manual-left").click(function () {
				return !1
			}),
			events.on("article.click", function () {
				_toggleSlideBarEle.click()
			})
		},
		isHide : function () {
			return isFullScreen
		},
		toggle : toggle,
		getMode : function () {
			return currentMode
		},
		getNextNode : function (overturn) {
			var currentEle,
			node;
			switch (currentMode) {
			case "search":
				currentEle = search.getResultItems().filter(".active"),
				node = catalog.getMenu().getNode(currentEle.next().data("id")),
				!node && overturn && (node = catalog.getMenu().getNode(search.getResultItems().first().data("id")));
				break;
			case "collect":
				currentEle = collect.getResultItems().filter(".active"),
				node = catalog.getMenu().getNode(currentEle.next().data("did")),
				!node && overturn && (node = catalog.getMenu().getNode(collect.getResultItems().first().data("did")));
				break;
			default:
				currentEle = catalog.getMenu().getSelected();
				var childrens = catalog.getMenu().nodes.childrens();
				node = catalog.getMenu().nodes.next(currentEle, childrens),
				!node && overturn && (node = catalog.getMenu().nodes.first())
			}
			return node
		},
		getPrevNode : function (overturn) {
			var currentEle,
			node;
			switch (currentMode) {
			case "search":
				currentEle = search.getResultItems().filter(".active"),
				node = catalog.getMenu().getNode(currentEle.prev().data("id")),
				!node && overturn && (node = catalog.getMenu().getNode(search.getResultItems().last().data("id")));
				break;
			case "collect":
				currentEle = collect.getResultItems().filter(".active"),
				node = catalog.getMenu().getNode(currentEle.prev().data("did")),
				!node && overturn && (node = catalog.getMenu().getNode(collect.getResultItems().last().data("did")));
				break;
			default:
				currentEle = catalog.getMenu().getSelected();
				var childrens = catalog.getMenu().nodes.childrens();
				node = catalog.getMenu().nodes.prev(currentEle, childrens),
				!node && overturn && (node = catalog.getMenu().nodes.last())
			}
			return node
		}
	}
}), define("document/state", function () {
	var state = {};
	return state.update = function (dom) {
		var book = $(dom.find(".m-manual"));
		state.$book = book,
		state.id = book.data("id"),
		state.basePath = book.data("basepath"),
		state.revision = book.data("revision"),
		state.title = book.data("title"),
		state.currentArticleId = book.data("currentArticleId")
	},
	state.update($),
	state
}), define("document/ui", function (require) {
	var state = require("document/state"),
	sidebar = require("document/sidebar"),
	events = require("document/events");
	require("component/jquery.cookie");
	var topbarAuto = function () {
		var _manualEle = state.$book,
		_safe = 150,
		_timer = null,
		_doc = state.$book.find(".manual-right"),
		_prevScroll = _doc.scrollTop(),
		isPhone = Util.isPhone();
		_doc.scroll(function () {
			clearTimeout(_timer),
			_timer = setTimeout(function () {
					if (sidebar.isHide() || isPhone) {
						var _scroll = _doc.scrollTop();
						_safe >= _scroll ? _manualEle.removeClass("manual-auto-open manual-auto-close") : _scroll > _prevScroll ? _manualEle.addClass("manual-auto-close").removeClass("manual-auto-open") : _manualEle.addClass("manual-auto-open").removeClass("manual-auto-close"),
						_prevScroll = _scroll
					}
				}, 90)
		})
	},
	backTop = function () {
		var _timer = null,
		_doc = $(document),
		articleBackTopEle = state.$book.find(".view-backtop");
		articleBackTopEle.click(function () {
			Util.scrollTop($("body"))
		}),
		_doc.scroll(function () {
			clearTimeout(_timer),
			_timer = setTimeout(function () {
					_doc.scrollTop() > 200 ? articleBackTopEle.addClass("active") : articleBackTopEle.removeClass("active")
				}, 300)
		})
	},
	setFontSize = function (size) {
		state.$book.addClass("font-size-" + size),
		$.cookie("font-size", size)
	},
	setFontTheme = function (theme) {
		state.$book.addClass("font-theme-" + theme),
		$.cookie("font-theme", theme),
		events.trigger("theme.change", theme)
	},
	fontSetting = function () {
		var size = $.cookie("font-size") || 1,
		theme = $.cookie("font-theme") || 0;
		setFontSize(size),
		setFontTheme(theme),
		$("#reduce-font-size").click(function () {
			state.$book.removeClass("font-size-" + size),
			size--,
			0 > size && (size = 0),
			setFontSize(size)
		}),
		$("#enlarge-font-size").click(function () {
			state.$book.removeClass("font-size-" + size),
			size++,
			size > 4 && (size = 4),
			setFontSize(size)
		}),
		$("#color-theme-preview-0").click(function () {
			state.$book.removeClass("font-theme-" + theme),
			theme = 0,
			setFontTheme(theme)
		}),
		$("#color-theme-preview-1").click(function () {
			state.$book.removeClass("font-theme-" + theme),
			theme = 1,
			setFontTheme(theme)
		}),
		$("#color-theme-preview-2").click(function () {
			state.$book.removeClass("font-theme-" + theme),
			theme = 2,
			setFontTheme(theme)
		})
	};
	return {
		init : function () {
			topbarAuto(),
			backTop(),
			fontSetting(),
			events.on("start", function () {
				state.$book.addClass("manual-active"),
				$(".think-loading").remove(),
				state.$book.find(".manual-tab").css("bottom", state.$book.find(".m-copyright").outerHeight())
			})
		}
	}
});
